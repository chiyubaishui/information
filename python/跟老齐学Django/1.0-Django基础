1.1 django起步：了解，安装，创建项目和应用，项目的基本配置和应用的默认文件
1.1.1 Django简介：快速，安全，插件多
1.1.2 安装Django（linux）
 安装指定版本：sudo pip install Django==1.10.1
 查看版本：import django
          print(django.get_version())
 源码安装：git clone https://github . com/django/django.git
       sudo pip install -e ./django

1.1.3 创建项目(project)
 创建一个mysite项目：cd /data/mysite && django-admin startproject mysite
 或者：django-admin startproject mysite .  （有__init__.py文件）
 启动项目：python manage.py runserver (可以通过http://127.0.0.1:8000/访问)
 
1.1.4 创建应用(application)
 python manage. py startapp blog 
 目录和文件说明：
 2. manage.py  在创建一个Django 项目后， manage.py被自动生成在项目的根目录中，它是对django-admin.py的简单封装，同样能够实现命令行操作。
 2. mysite mysite 是所建项目的管理功能目录，这个目录的名称因用户所创建的项目名称的不同而异.
  settings.py：这个文件中包括了项目的初始化设置，可以针对整个项目进行有关参数配置，比如配置数据库、添加应用等。
  urls.py：这是一个URL 配置表文件，主要是将URL 映射到应用程序上。当用户请求某个U虹时， Django 项目会根据这个文件中的映射关系指向某个目标对象，该对象可以是某个应用中的urls.py 文件，也可以是某个具体的视图函数。在Django 中，这个文件也被称为URLconf.
  wsgi.py: WSGI 是Web Server Gateway Interface 的缩写
 3. blog 是在项目中所创建的应用之一，注意是之一，用创建应用的指令还可以创建很多其他的应用。
  admin.py：在这个文件中，可以自定义Django 管理工具，比如设置在管理界面能够管理的项目，或者通过重新自定义与系统管理有关的类对象，向管理功能增加新的内容。
  apps.py：这个文件是眨jangol.10 之后增加的，通常包含对应用的配置，比如为管理功能提供一个适合的应用名称。
  migrations：这是一个目录，用于存储应用的数据库表结构的指令，通过这些指令可以修改和创建数据库，从而在models.py 模型类和数据库表之间迁移。
  models.py：这是应用的数据模型，每个问ango 应用都应当有一个models.py 文件.
  views.py：这是一个重要的文件，用户保存响应各种请求的函数或者类。如果编写的是函数，则称之为基于函数的视图：如果编写的是类，则称之为基于类的视图。views.py就是保存函数或者类的视图文件。
 4. templates 存放静态的HTML文件
 5. db.sqlite3 默认的数据库

1.1.5 网站的配置
 在Django 项目中，主管信息注册（对本项目进行各种信息声明〉的文件是./mysite/settings.py.
 BASE_DIR: os.path.dirname(os.path.dirname(os.path.abspath(file)))，这里BASE_DIR也就是整个工程project的目录，即djangotest这个目录
 DEBUG ：其值为True 或者False 。在开发过程中， 需要设置成True ，在测试功能时，Django 能够显示详细的报错信息一一这是"开发模式"。如果将项目部署到真正要对外发布的服务器上，我们称之为"生产环境",必须将其值修改为False ，从而避免暴露项目的内部信息。
 ALLOWED HOSTS ：在DEBUG 为True 时，其值可以为空。当部署到生产环境中时，要把主域名填写到这里，才能通过域名访问到本网站。否则会报错
 CommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False
 时STALLED APPS ：这是一个非常重要的配置项，所有的应用只有写到这里才能生效。新增加的blog 'blog.apps.BlogConfig'
 DATABASES ：在这里可以配置数据库。
 DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 连接的数据库类型
        'HOST': '127.0.0.1',  # 连接数据库的地址
        'PORT': 3306,  # 端口
        'NAME': "day61",  # 数据库名称
        'USER': 'root',  # 用户
        'PASSWORD': '123456'  # 密码
   }
 }
 LANGUAGE CODE ：设置项目的语言， 一般情况下可以不用修改.
 TIME_ZONE ：设置时区，通常使用东八区，设置为“ Asia/Shan_ghai ”。
 STATIC_URL = '/static/'# 静态文件夹的别名
 STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
 ]
 # 静态文件夹的位置

1.1.6 知识点
 1. 开发模式：没有正式对外部客户提供服务，这种模式下很多配置都是为了开发而定的，比如在Djang开发模式中， 不需要配置A pache 或者Nginx 等服务器，也能够运行网站，这是因为Django 本身就提供了简单的Web 服务器功能。
 在开发模式中， Django 会自动检测到修改的代码并重新加载，不需要每次修改代码后重新启动Web 服务器。只有在新增加文件后，才需要重启Django 服务。运行Django服务的指令是python manage.py runserver.
 Django 安装好之后，就有了django-admin 这个默认命令，可以用diango-admin startprproject projectname 命令创建一个Django 项目。项目是由若干个“应用(app) 组成的， 实现具体功能。创建应用可以使用python manag.py startapp appname 命令，也可以使用django-amdin startapp appname 命令。每个应用都要在项目的settings.py 丈件的INSTALLED_APPS 中进行声明，告诉Djang 。这个应用是本项目的一部分。
 
1.2 编写博客的数据模型类（ORM）
 在Django 中，我们不需要通过SQL 语句直接跟数据库打交道，而是完全用Python 的方式创建数据模型，之后交给Django 完成数据库的操作。
1.2.1 数据模型类
 利用Django 开发网站系统， 一般情况下，要先编写数据模型，就是在./blog/models.py 中写一个类，这个类与数据库中的数据表具有对应关系。
 在mysite/__init__.py文件中导入pymysql,告诉Django用pymysql来代替默认的MySQLdb
 import pymysql
 pymysql.install_as_MySQLdb()
 在./blog/models.py 中编写博客的数据模型Blog ，本质上它是一个继承了django.db.mod els.Model的类。
 
 from django.db import models
 from django.utils import timezone
 from django.contrib.auth.models import User
 class BlogArticles(models.Model):
  title = models.CharField(Max_length=300)
  autho ＝ models.ForeignKey(Use,related_name="blog_posts") #F oreignKey（） 就反映了这种“ 一对多” 关系,类User 就是BlogA口icles 的对应对象，related_ name＝”blog_posts”的作用是允许通过类User 反向查询到BlogArticles .
  body = models.TextField()
  publish = models.DateTimeField(default=timezone.now)
 class Meta:
  ordering = ("-publish",) #通过ordering =（”-publish”，）规定了BlogArticles 实例对象的显示顺序，即按照publish 字段值的倒序显示。
 def __str__(self): #__str__是Django的一个内置方法。str一般是用于说明类的说明，或者定义自己想要的输出结果。
  return self.title
  
 在/mysite/manage.py 位置执行python manage.py makemigrations #- Create model BlogArticles,python manage.py sqlmigrate blog 0001,为SQL语句
 python manage.py migrate #创建数据表
 
1.2.2 发布博客文章
 创建超级管理员：python manage.py createsuperuser  #admin  paic1234
 然后运行服务器: python manage.py runserver
 在浏览器的地址栏中输入http://127.0.0.1:8000/admin/,出现Django administration界面
 要发布博客文章：编辑的./blog/admin.py文件
 from django.contrib import admin
 from .models import BlogArticles
 admin.site.register(BlogArticles)  #将BlogArticles 类引入到当前环境，然后通过代码将该类注册到admin中。
 刷新页面,这时可以看到新注册的BLOG。单击Blog articles 右侧的“ Add ”按钮可以添加博客文章
 
1.2.3 知识点
1. HTTP
2. URL
3. ORM：即 Object-Relational Mapping （对象关系映射）。
 • 可移植性强
 • 安全性好
 • 查询语法简单

1.3 显示博客信息
1.3.1 显示博客文章标题
 from django.shortcuts import render
 from .models import BlogArticles
 def blog_title(request):
  blogs = BlogArticles.objects.all()
  return render(request,"blog/titles.html",{"blogs":blogs})
 用来读取文章标题，这个函数通常被写/blog/views.py文件中，当然也可以写到任意名称的文件中
 blog_title()这个函数，是在视图文件 views.py 中编写的函数，这种方式我们称之为“基于函数的视图”，这个函数被叫做“视图函数“；
 函数的参数是request ，这个参数是所接收到的请求且不能缺少，井总是位于第一的位置上;
 render()的作用是将数据渲染到指定模板上;
 在render()中出现的"blog/titles.html"是标题列表的前端展示页面--被称为“模板”，在每一个应用中都可以有一个专门的模板目录，现在我们进入应用blog的目录 建立一个子目templates,名称和位置必须如此，再按照如下方式建立有关文件和子目录
 •- templates
  |- base.html
  |- blog
   ｜－ titles.html
 在模板目录中，有 base.html 文件，这个文件是将所有模板中公共的部分抽取出来，在其他文件中只需要编写个性部分的代码。也就是说 Django 的模板文件中，是可以有“继承”功能的。在本项目中，就这样来编写 base.html
 <!DOCTYPE html> 
 <html lang="zh-cn"> 
 <head>
  <meta http-equiv="X-UA-Compatible" content="IE=Edge">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <title>{% block title %}{% endblock %}</title> 
  <link rel="stylesheet" href="https://github.com/necolas/normalize.css/blob/master/normalize.css"> 
  <link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"> 
 </head>
 <body>
  <div class="container">
   {% block content %}
   {% endblock %}
  </div>
 <script src="https://cdn.bootcss.com/jquery/3.2.1/jquery.js"></script> 
 <script src="https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"> </script>
 </body>
 </html>
 
 在 Django模板中，｛%block name % ｝是块标签，用它来包裹块内容，表示其间的内容可以自定义， name是块的名称块的结束标签都是｛% endblock % ｝
 是引入了前端模板文件中常用的 JavaScript 库中的 JQuery 文件及有关其他 JavaScript 文件
 编写与标题列表相对应的模板， 即./templates/blog/titles.html文件。
 <!DOCTYPE html>
 <html lang="en">
 {% extends "base.html" %} #继承已经建立的模板 base.html 还可以理解为对 base.html 的扩展
 {% block title %}blog titles{% endblock %} #是在本模板文件中对“父模板” base.html 中的同名称块标签进行重写。
 {% block content %}
 <div class="row text-center vertical-middle-sm">
  <h1>我的博客</h1>
 </div>
 <div class="row">
  <div class="col-xs-12 col-md-8">
  <ul>
  {% for blog in blogs %} #循环
   <li><a href="{{ blog.id }}">{{ blog.title }}</a></li> #现每个标题都有了超链接
  {% endfor %}
  </ul>
  </div>
  <div class="col-xs-6 col-md-4">
  <h2>广告</h2>
  <p>跟老齐学:www.itdiffer.com</p>
  <img width="200px" src=" https://raw.githubusercontent.com/qiwsir/DjangoPracticeProject/master/python-book2.png">
  </div>
 </div>
 {% endblock %}

1.3.2 查看文章内容
 def blog_article(request,article_id):
  article = BlogArticles.objects.get(id=article_id)
  pub = article.publish
  return render(request,"blog/content.html",{"article":article,"publish":pub})
 然后编写与之对应的模板，创建./template/blog/content.html 文件 
 {% extends "base.html" %}
 {% block title %}blog article{% endblock %}
 {% block content %}
 <div class="row text-center vertical-middle-sm">
  <h1>{{ article.title }}</h1> 
 </div>
 <div class="row">
  <div class="col-xs-12 col-md-8">
   <p class="text-center"><span>{{ article.author.username }} 
    </span><span style="margin-left:20px">{{ publish }}</span>
   </p>
 <div>{{ article.body }}</div> 
  </div>
  <div class="col-xs-6 col-md-4"> 
   <h2>广告</h2>
   <p>跟老齐学:www.itdiffer.com</p>
   <img width="200px" src="https://raw.githubusercontent.com/qiwsir/DjangoPracticeProject/master/python-book2.png">
  </div>
 </div>
 {% endblock %} 
 
 要在./blog/urls.py文件中增加新的 URL 路径。
 url(r'(?P<article_id>\d)/$',views.blog_article,name="blog_detail"),#，使用r'(?P<article_id>\d)这种方式 得到该请求的id数值并赋值给参数article_id

1.3.3 知识点
1. Django的MTV
 在MVC模式中， Model 代表数据存取层： View 代表系统中选择显示什么和怎么显示的部分： Controller 是系统中根据用户输入和需要访问模型，以决定使用哪个视图的部分。MVC 模式已经成为网站开发的共识， Django 更不例外，也遵循这种模式，或者说 Django的MVC 的框架，具体表现如下。
 M：数据存储和读取部分，由 Django 的数据模型部分承担
 V：确定要显示哪些数据及如何显示，由视图和模板进行处理。
 C：根据客户端请求映射到相应的视图，由 Django 框架根据 URLconf 设置，调用相应的函数。
 于是Django就转变为模型(model),模板(Templete)和视图(Views)三部分了，可以称之为 MTV 模式。
 M：模型（Model ），即数据存取层，模型是网站项目的基础，主要负责处理与数据相的事务，如读取 写入数据等。
 T：模板（ Template ），即表现层， 处理与表现有关的事务，例如如何在页面中显示相内容。
 V：视图（ Views ），即业务逻辑层，包含存取模型及调取相应模板的相关逻辑型）和 （模板〉之间的桥梁。当 Django 得到用户的请求后，根据 RL 映射关系调用相应的视图，视图则调用和处理有关数据。与模板相比，视图确定访问者能看到哪些数据，而模板确定怎么看到这些数据（或者说用什么方式看到这些数据）
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 